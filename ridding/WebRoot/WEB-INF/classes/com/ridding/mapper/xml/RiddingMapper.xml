<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ridding.mapper.RiddingMapper">

	<resultMap type="Ridding" id="riddingMap">
		<id property="id" column="id" />
		<result property="leaderUserId" column="leaderUserId" />
		<result property="mapId" column="mapId" />
		<result property="name" column="name" />
		<result property="riddingType" column="riddingType" />
		<result property="createTime" column="createTime" />
		<result property="lastUpdateTime" column="lastUpdateTime" />
		<result property="userCount" column="userCount" />
		<result property="riddingStatus" column="riddingStatus" />
		<result property="isRecom" column="isRecom" />
		<result property="isPublic" column="isPublic" />
		<result property="likeCount" column="likeCount" />
		<result property="commentCount" column="commentCount" />
		<result property="useCount" column="useCount" />
		<result property="careCount" column="careCount" />
		<result property="isSyncSina" column="isSyncSina" />

	</resultMap>
	<insert id="addRidding" parameterType="Ridding">
		INSERT INTO TB_Ridding(
		leaderUserId,
		mapId,
		name,
		riddingType,
		createTime,
		lastUpdateTime,
		userCount,
		riddingStatus,
		isRecom,
		isPublic,
		likeCount,
		commentCount,
		careCount,
		useCount,
		isSyncSina
		)VALUES(
		#{leaderUserId},
		#{mapId},
		#{name},
		#{riddingType},
		#{createTime},
		#{lastUpdateTime},
		#{userCount},
		#{riddingStatus},
		#{isRecom},
		#{isPublic},
		#{likeCount},
		#{commentCount},
		#{careCount},
		#{useCount},
		#{isSyncSina}
		)
		<selectKey keyProperty="id" resultType="long">
			SELECT
			LAST_INSERT_ID() AS VALUE
		</selectKey>
	</insert>


	<!-- 查询Ridding -->
	<select id="getRidding" resultMap="riddingMap">
		SELECT * from TB_Ridding where
		id=#{id};
	</select>

	<update id="increaseUserCount" parameterType="hashMap"
		flushCache="true" statementType="PREPARED">
		update TB_Ridding set userCount =
		userCount + #{count}
		where id = #{id} ;
	</update>

	<select id="getRiddingList" resultMap="riddingMap">
		SELECT * from TB_Ridding where
		id in
		<foreach item="item" collection="list" index="index" open="("
			separator="," close=")">
			#{item} 
	     </foreach>
		and 30 > riddingStatus order by createTime desc;
	</select>

	<delete id="deleteRidding" parameterType="long" flushCache="true"
		statementType="PREPARED">
		delete from TB_Ridding
		where id=#{riddingId};
	</delete>

	<update id="updateRiddingStatus" parameterType="hashMap"
		flushCache="true" statementType="PREPARED">
		update TB_Ridding set riddingStatus =
		#{riddingStatus}
		where id = #{id} ;
	</update>

	<update id="updateRecomStatus" parameterType="hashMap"
		flushCache="true" statementType="PREPARED">
		update TB_Ridding set isRecom =
		#{isRecom}
		where id = #{id} ;
	</update>

	<update id="updatePublicStatus" parameterType="hashMap"
		flushCache="true" statementType="PREPARED">
		update TB_Ridding set isPublic =
		#{isPublic}
		where id = #{id} ;
	</update>

	<select id="getRiddingListByLastUpdateTime" resultMap="riddingMap">
		SELECT * from TB_Ridding where isPublic = 0
		<if test="isLarger==1">
			and lastUpdateTime > #{lastUpdateTime} order by
			lastUpdateTime asc
		</if>
		<if test="isLarger==0">
			and #{lastUpdateTime} > lastUpdateTime order by
			lastUpdateTime desc
		</if>
		limit #{limit};
	</select>

	<update id="incLikeCount" parameterType="long" flushCache="true"
		statementType="PREPARED">
		update TB_Ridding set likeCount = likeCount + 1
		where id
		= #{riddingId} ;
	</update>
	<update id="incCareCount" parameterType="long" flushCache="true"
		statementType="PREPARED">
		update TB_Ridding set careCount = careCount + 1
		where id
		= #{riddingId} ;
	</update>
	<update id="incUseCount" parameterType="long" flushCache="true"
		statementType="PREPARED">
		update TB_Ridding set useCount = useCount + 1
		where id
		=
		#{riddingId} ;
	</update>
	<update id="incCommentCount" parameterType="long" flushCache="true"
		statementType="PREPARED">
		update TB_Ridding set commentCount = commentCount + 1
		where id
		= #{riddingId} ;
	</update>

	<select id="getRiddingsbyLike" resultMap="riddingMap"
		parameterType="hashMap">
		select * from
		TB_Ridding
		order by likeCount desc
		limit
		#{limit}
		offset #{offset};
	</select>

	<select id="getRiddingsbyComment" resultMap="riddingMap"
		parameterType="hashMap">
		select * from
		TB_Ridding
		order by commentCount desc
		limit
		#{limit}
		offset #{offset};
	</select>

	<select id="getRiddingsbyUse" resultMap="riddingMap"
		parameterType="hashMap">
		select * from TB_Ridding
		order by useCount desc
		limit
		#{limit}
		offset #{offset};
	</select>

	<select id="getAllRidding" resultMap="riddingMap">
		SELECT * from TB_Ridding;
	</select>

	<select id="getRiddingListByStartRiddingId" resultMap="riddingMap">
		SELECT * from TB_Ridding
		where
		id >#{riddingId}
		order by createTime desc;
	</select>
</mapper>